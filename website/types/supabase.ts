/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/recommendations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recommendations.id"];
          created_at?: parameters["rowFilter.recommendations.created_at"];
          title?: parameters["rowFilter.recommendations.title"];
          description?: parameters["rowFilter.recommendations.description"];
          url?: parameters["rowFilter.recommendations.url"];
          image_url?: parameters["rowFilter.recommendations.image_url"];
          category?: parameters["rowFilter.recommendations.category"];
          location?: parameters["rowFilter.recommendations.location"];
          source?: parameters["rowFilter.recommendations.source"];
          cost?: parameters["rowFilter.recommendations.cost"];
          clicks?: parameters["rowFilter.recommendations.clicks"];
          downvotes?: parameters["rowFilter.recommendations.downvotes"];
          expiration_date?: parameters["rowFilter.recommendations.expiration_date"];
          approved?: parameters["rowFilter.recommendations.approved"];
          channel?: parameters["rowFilter.recommendations.channel"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["recommendations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** recommendations */
          recommendations?: definitions["recommendations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recommendations.id"];
          created_at?: parameters["rowFilter.recommendations.created_at"];
          title?: parameters["rowFilter.recommendations.title"];
          description?: parameters["rowFilter.recommendations.description"];
          url?: parameters["rowFilter.recommendations.url"];
          image_url?: parameters["rowFilter.recommendations.image_url"];
          category?: parameters["rowFilter.recommendations.category"];
          location?: parameters["rowFilter.recommendations.location"];
          source?: parameters["rowFilter.recommendations.source"];
          cost?: parameters["rowFilter.recommendations.cost"];
          clicks?: parameters["rowFilter.recommendations.clicks"];
          downvotes?: parameters["rowFilter.recommendations.downvotes"];
          expiration_date?: parameters["rowFilter.recommendations.expiration_date"];
          approved?: parameters["rowFilter.recommendations.approved"];
          channel?: parameters["rowFilter.recommendations.channel"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.recommendations.id"];
          created_at?: parameters["rowFilter.recommendations.created_at"];
          title?: parameters["rowFilter.recommendations.title"];
          description?: parameters["rowFilter.recommendations.description"];
          url?: parameters["rowFilter.recommendations.url"];
          image_url?: parameters["rowFilter.recommendations.image_url"];
          category?: parameters["rowFilter.recommendations.category"];
          location?: parameters["rowFilter.recommendations.location"];
          source?: parameters["rowFilter.recommendations.source"];
          cost?: parameters["rowFilter.recommendations.cost"];
          clicks?: parameters["rowFilter.recommendations.clicks"];
          downvotes?: parameters["rowFilter.recommendations.downvotes"];
          expiration_date?: parameters["rowFilter.recommendations.expiration_date"];
          approved?: parameters["rowFilter.recommendations.approved"];
          channel?: parameters["rowFilter.recommendations.channel"];
        };
        body: {
          /** recommendations */
          recommendations?: definitions["recommendations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/increment_downvotes": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            rec_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/increment_clicks": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            rec_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  recommendations: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default (now() AT TIME ZONE 'utc'::text)
     */
    created_at: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /** Format: text */
    url: string;
    /** Format: text */
    image_url: string;
    /**
     * Format: public.recommendation_category
     * @enum {string}
     */
    category: "eat" | "do" | "learn";
    /** Format: extensions.geography(Point,4326) */
    location?: string;
    /** Format: text */
    source?: string;
    /**
     * Format: public.cost_type
     * @enum {string}
     */
    cost?: "free" | "paid";
    /** Format: bigint */
    clicks?: number;
    /** Format: bigint */
    downvotes?: number;
    /** Format: timestamp with time zone */
    expiration_date?: string;
    /** Format: boolean */
    approved?: boolean;
    /** Format: text */
    channel?: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description recommendations */
  "body.recommendations": definitions["recommendations"];
  /** Format: bigint */
  "rowFilter.recommendations.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.recommendations.created_at": string;
  /** Format: text */
  "rowFilter.recommendations.title": string;
  /** Format: text */
  "rowFilter.recommendations.description": string;
  /** Format: text */
  "rowFilter.recommendations.url": string;
  /** Format: text */
  "rowFilter.recommendations.image_url": string;
  /** Format: public.recommendation_category */
  "rowFilter.recommendations.category": string;
  /** Format: extensions.geography(Point,4326) */
  "rowFilter.recommendations.location": string;
  /** Format: text */
  "rowFilter.recommendations.source": string;
  /** Format: public.cost_type */
  "rowFilter.recommendations.cost": string;
  /** Format: bigint */
  "rowFilter.recommendations.clicks": string;
  /** Format: bigint */
  "rowFilter.recommendations.downvotes": string;
  /** Format: timestamp with time zone */
  "rowFilter.recommendations.expiration_date": string;
  /** Format: boolean */
  "rowFilter.recommendations.approved": string;
  /** Format: text */
  "rowFilter.recommendations.channel": string;
}

export interface operations {}

export interface external {}
